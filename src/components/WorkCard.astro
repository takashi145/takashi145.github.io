---
interface Props {
  title: string;
  description: string;
  image: string;
  tags: string[];
  github?: string;
  demo?: string;
  slug?: string;
  hasDetailPage: boolean;
}

const { title, description, image, tags, github, demo, slug, hasDetailPage } =
  Astro.props;
---

<div
  class="work-card group relative overflow-hidden rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm cursor-pointer transition-[transform,box-shadow] duration-300 ease-[ease] active:-translate-y-1 hover:-translate-y-1"
>
  <div class="aspect-video overflow-hidden bg-gray-300 dark:bg-gray-700">
    <img
      src={image}
      alt={title}
      class="w-full h-full object-cover transition-transform duration-300 group-active:scale-105 group-hover:scale-105"
    />
  </div>

  <div class="p-4 bg-white dark:bg-gray-800">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
      {title}
    </h3>
    <div class="flex flex-wrap gap-2">
      {
        tags.map((tag) => (
          <span class="px-2 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-xs rounded">
            {tag}
          </span>
        ))
      }
    </div>
  </div>

  <div
    class="work-card-overlay absolute inset-0 bg-black/90 opacity-0 group-active:opacity-100 group-hover:opacity-100 transition-opacity duration-300 flex flex-col items-center justify-center p-8 text-white pointer-events-none group-active:pointer-events-auto group-hover:pointer-events-auto"
  >
    <h3 class="text-2xl font-bold mb-4">{title}</h3>
    <p class="text-sm mb-6 text-center text-gray-200 max-w-md leading-relaxed">
      {description}
    </p>
    <div class="flex flex-wrap gap-2 mb-6 justify-center">
      {
        tags.map((tag) => (
          <span class="px-3 py-1 bg-purple-500/80 text-white text-xs rounded-full">
            {tag}
          </span>
        ))
      }
    </div>
    <div class="flex gap-3 flex-wrap justify-center">
      {
        github && (
          <a
            href={github}
            target="_blank"
            rel="noopener noreferrer"
            class="px-5 py-2.5 bg-white text-gray-900 text-sm rounded-lg hover:bg-purple-500 hover:text-white transition-colors font-medium"
            onclick="event.stopPropagation()"
          >
            GitHub
          </a>
        )
      }
      {
        demo && (
          <a
            href={demo}
            target="_blank"
            rel="noopener noreferrer"
            class="px-5 py-2.5 bg-purple-500 text-white text-sm rounded-lg hover:bg-purple-600 transition-colors"
            onclick="event.stopPropagation()"
          >
            サイトへ
          </a>
        )
      }
      {
        hasDetailPage && slug && (
          <a
            href={`/works/${slug}`}
            class="px-5 py-2.5 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600 transition-colors"
            onclick="event.stopPropagation()"
          >
            詳細
          </a>
        )
      }
    </div>
  </div>
</div>

<script>
  // タッチデバイスだとホバーでのオーバーレイ表示できないため、
  // クリックでオーバーレイを表示・非表示にする
  document.addEventListener("DOMContentLoaded", () => {
    const cards = document.querySelectorAll(".work-card");

    cards.forEach((card) => {
      const overlay = card.querySelector(".work-card-overlay");
      if (!overlay) return; // オーバーレイがない場合はスキップ

      // カードをタップ時
      card.addEventListener("click", (e) => {
        const isActive = card.classList.contains("active");

        // 他のカードのactiveを外す
        document.querySelectorAll(".work-card.active").forEach((otherCard) => {
          if (otherCard !== card) {
            otherCard.classList.remove("active");
          }
        });

        if (!isActive) {
          card.classList.add("active");
        } else {
          card.classList.remove("active");
        }
      });
    });

    // カード外をクリックしたら閉じる
    document.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      if (!target.closest(".work-card")) {
        document.querySelectorAll(".work-card.active").forEach((card) => {
          card.classList.remove("active");
        });
      }
    });
  });
</script>

<style>
  /* タッチデバイスはactiveクラスがついてるかどうかでオーバーレイ表示 */
  @media (hover: none) {
    .work-card.active .work-card-overlay {
      opacity: 1;
      pointer-events: auto;
    }
  }
</style>
